
external Error;

module DA_STANDARD.FUNCTIONAL {
  function apply_function(f, args) {

    if (arguments.length !== 2)
      throw new Error('Wrong # of argumments: expected: ' + 2 + ' actual: ' + arguments.length);

    if (!is_array(args) && !is_arguments(args))
      throw new Error('Not an array/arguments: ' + to_string(args));

    if (f.length !== args.length)
      throw new Error('function.length (' + function_to_name(f) + ' ' + f.length + ') !== ' + args.length);

    return f.apply(null, args);
  }

  function identity(x) {

    if (arguments.length !== 1)
      throw new Error("arguments.length !== 0");
    return x;
  }

  function to_function_specs() {
    spec(true, function to_function_returns_sole_function() {
        var f = function () {};
        return to_function(f) === f;
        });

    spec(2, function to_function_returns_an_identity_function() {

        return to_function(2)();
        });

    spec('"3"', function to_function_returns_a_function() {

        return to_function(identity, to_string, to_string)(3);
        });
  }

  function to_function() {
    if (arguments.length === 1) {
      if (is_function(arguments[0])) {
        return arguments[0];
      } else{
        var x = arguments[0];
        return function () { return x; };
      }
    }

    var i = 0, f;
    var l = arguments.length;
    while (i < l) {
      f = arguments[i];
      if (!is_function(f))
        throw new Error('Not a function: ' + to_string(f));
      i = i + 1;
    }

    var funcs = arguments;
    return function () {
      var i = 0, f, val;
      while (i < l) {
        f = funcs[i];
        if (i === 0) {
          if (f.length !== arguments.length)
            throw new Error('Function.length ' + f.length + ' ' + to_string(f) + ' !=== arguments.length ' +  arguments.length + ' ' + to_string(arguments));
          val = apply_function(f, arguments);
        } else {
          if (f.length !== 1)
            throw new Error('Function.length ' + f.length + ' !=== 1');
          val = apply_function(f, [val]);
        }
        i = i + 1;
      }
      return val;
    }; // return
  }

  function find(_funcs) {
    var funcs = _.toArray(arguments);
    return function (v) {
      return _.find(v, and.apply(null, funcs));
    };
  }

} // === module DA_STANDARD.FUNCTIONAL

