
import System;
import DA_STANDARD.SPECS;


module DA_STANDARD.STRING
{

  void length_specs() {
    should_eq(2, int () { return length("  ");   } );
    should_eq(1, int () { return length("a");    } );
    should_eq(5, int () { return length(" abc ");});
  }

  int length(string raw_v) {
    return raw_v.length;
  }

  void is_whitespace_specs() {
    should_eq(true, bool () { return is_whitespace("   "); });
    should_eq(false,bool () { return is_whitespace("");    });
  }

  bool is_whitespace(string v) {
    var ans = v.match(/^\s+$/g);
    if (ans && (ans.length || 0) > 0)
      return true;
    return false;
  }

  void is_blank_specs() {
    should_eq(true,  bool () { return is_blank(""); });
    should_eq(true,  bool () { return is_blank("   "); });
    should_eq(false, bool () { return is_blank(" a  "); });
  }

  bool is_blank(string v) {
    System.RegExp WHITE_SPACE_REGEX = /^\s+|\s+$/g;
    return length( v.replace(WHITE_SPACE_REGEX, '') ) < 1;
  }

  void is_empty_specs() {
    should_eq(true,  bool () { return is_empty(""); });
    should_eq(false, bool () { return is_empty("a"); });
    should_eq(false, bool () { return is_empty("  "); });
  }

  bool is_empty(string v) {
    return v.length === 0;
  } // === func

  function standard_name_specs() {
    should_eq("name name", string () { return standard_name('NAME NAME'); });  // it 'lowercases names'
    should_eq("name",      string () { return standard_name('  name  '); });   // it 'trims string'
    should_eq("n ame",     string () { return standard_name('n   aME');  });   // it 'squeezes whitespace'
  }

  string standard_name(str) {
    return trim(str).replace(/\s+/g, ' ').toLowerCase();
  }

  function trim_specs() {
    should_eq("a", string () { return trim(" a    "); });
  }

  string trim(string raw) {
    return raw.replace(/^\s+|\s+$/, "");
  }

  function split_on_specs() {
    should_eq(['a', 'b', 'c'], string[] () { return split_on(/;/, "a;b;c"); });
    should_eq(['a', 'b', 'c'], string[] () { return split_on(/;/, "a;b;c"); });
    should_eq(['a', 'c'],      string[] () { return split_on(/;/, "a; ;c"); });
    should_eq(['form', 'id'],  string[] () { return split_on('.', 'form.id'); });
  }

  string[] split_on(pattern, string raw) {
    string str = trim(raw);
    if (is_empty(str))
      return [];

    string[] fin = [];
    string[] arr = str.split(pattern);
    int len      = arr.length;
    string x     = "";

    for (int i = 0; i < len; i++) {
       x = trim(arr[i]);
       if (!is_empty(x))
         fin.push(x);
    }

    return arr;
  }

} // === module DA_STANDARD

