
external document;
import DA_STANDARD.STRING;
import DA_STANDARD.COMMON;

module DA_STANDARD.DOM {

  /* void Element_attrs_specs() { */
  /*   spec(dom_attrs, [$('<div id="000" img=".png"></div>')[0]], {id: "000", img: ".png"}); */
  /*   spec(dom_attrs, [$('<div class="is_happy"></div>')[0]], {"class": 'is_happy'}); */
  /* } */
  class ID_STATE {

    public static int last_id = 0;

    public static int new_id() {
      ID_STATE.last_id = ID_STATE.last_id + 1;
      return ID_STATE.last_id;
    }

    public static string new_id(string prefix) {
      return trim(prefix) + (ID_STATE.new_id().toString());
    }

  }

  class Document {
    public static Element querySelector(string s) {
      return new Element(document.querySelector(s));
    }

    public static NodeList querySelectorAll(string s) {
      return new NodeList(document.querySelectorAll(s));
    }
  } // class DOC

  class NodeList {
    public var origin;

    public property int length () {
      return this.origin.length;
    }

    public NodeList(v) {
      this.origin = v;
    }

    public Element item(int i) {
      return new Element(this.origin[i]);
    }

    public NodeList add_class(string new_name) {
      int l = this.origin.length;
      for(int i = 0; i < l; i++) {
        this.item(i).add_class(new_name);
      }
      return this;
    }

    public NodeList remove_class(string target) {
      int l = this.origin.length;
      for(int i = 0; i < l; i++) {
        this.item(i).remove_class(target);
      }
      return this;
    }

  } // class NodeList

  class Element {

    public var origin;

    public Element(v) {
      this.origin = v;
    }

    public Element add_class(string new_class) {
      this.origin.classList.add(new_class);
      return this;
    }

    public Element remove_class(string target) {
      this.origin.classList.remove(target);
      return this;
    }

    public bool has_attr(string raw_name) {
      string val = attr(trim(raw_name));
      if (is_nothing(val) || is_empty(val))
        return false;
      return true;
    }

    public string attr(string raw_name) {
      string name = trim(raw_name);
      return trim( this.origin.getAttribute(name) || "" );
    }

    public Element attr(string raw_name, string raw_val) {
      string name = trim(raw_name);
      string val  = trim(raw_val);
      this.origin.setAttribute(name, val);
      return this;
    }

    // Returns id.
    // Sets id of element if no id is set.
    //
    // .dom_id(raw_or_jquery)
    public string dom_id() {
      return this.dom_id("element_");
    } // === id

    // Returns id.
    // Sets id of element if no id is set.
    //
    // .dom_id('prefix')
    public string dom_id(string prefix) {
      string old = this.attr('id');

      if (!is_empty(old))
        return old;

      var str = ID_STATE.new_id(prefix);
      this.attr('id', str);
      return str;
    } // === id

  } // === class Element

  public NodeList query(string q) {
    return Document.querySelectorAll(q);
  }

} // === DA_STANDARD.DOM


