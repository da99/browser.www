#!/usr/bin/env bash
#
#
THE_ARGS="$@"
if [[ -z "$@" ]]; then
  action="watch"
else
  action=$1
  shift
fi

set -u -e -o pipefail

Color_Off='\e[0m'
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
Orange='\e[0;33m'

files="$(find . -maxdepth 1 -type f -name '*.js')"
main_js="$(echo -e "$files" | head -n 1)"
case $action in
  help|--help)
    bash_setup print_help $0
    ;;

  list)
    # === list  # List functions
    cat -n $(dirname $0)/../main.js \
      | grep --extended-regexp '^\s+[0-9]+\sfunction\s+[^\(\)]+' \
      | sort -k2 \
      | grep --extended-regexp '\s+[^\( ]+\(' \
      | cut -d\( -f1 \
      | tr '\t' ' '  \
      | tr --squeeze-repeats ' ' \
      | tr ' ' '\t'  \
      | cut -f2,4 \
      | grep --color --extended-regexp '\s+.+' \
    ;;

  watch)
    cmd () {
      if [[ -z "$@" ]]; then
        path="$main_js"
      else
        path="$1"
        shift
      fi

      stamp="$(date '+%r')"

      { jshint $path && echo -e "=== ${Green}Passed${Reset}: $path -> $stamp"; } || \
        echo -e "${Red}Failed${Reset}"

      content="$(cat "$path")"
      output="tmp/$(basename $path)"
      echo "${content/THE_FILE_DATE/$stamp}" > "$output"
    }
    cmd

    echo -e "\n=== Watching: $files"
    while read -r CHANGE; do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      path="${dir}$(echo "$CHANGE" | cut -d' ' -f 3)"
      file="$(basename $path)"

      echo -e "\n=== $CHANGE ($path)"

      if [[ "$path" =~ "$0" ]]; then
        echo "=== Reloading..."
        break
      fi

      if [[ "$file" =~ ".js" ]]; then
        cmd $path
      fi
    done < <(inotifywait --quiet --monitor --event close_write  $(echo -e "$files" | tr '\n' ' ') "$0") || exit 1
    $0 watch $THE_ARGS
    ;;

  *)
    echo "Unknown option: $action" 1>&2
    exit 1
    ;;

esac
