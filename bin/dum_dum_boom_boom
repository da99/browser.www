#!/usr/bin/env bash
#
#
THE_ARGS="$@"
if [[ -z "$@" ]]; then
  action="watch"
else
  action=$1
  shift
fi

if [[ -z "$PORT" ]]; then
    PORT=4567
fi
export PORT="$PORT"

set -u -e -o pipefail

TEMP_DIR=${TEMP_DIR:-"$(mktemp -d)"}
export TEMP_DIR

Color_Off='\e[0m'
Bold="$(tput bold)"
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
BGreen='\e[1;32m'
Orange='\e[0;33m'
BOrange='\e[1;33m'

files="$(find main/ -maxdepth 1 -type f -name '*.js' )"
main_js="$(echo -e "$files" | head -n 1)"


start_server () {
    shutdown_server
    (node main/server.js) &
    server_pid="$!"

    mkdir -p tmp
    echo "$server_pid" > tmp/pid.txt
    echo "=== Started server: $server_pid - $$"
}

shutdown_server () {
    if [[ -f "tmp/pid.txt"  ]]; then
        pid="$(cat tmp/pid.txt)"
        if [[ -n "$pid" ]]; then
            if kill -0 "$pid" 2>/dev/null; then
                echo "=== Shutting server down: pid: $pid - \$\$: $$ ..."
                kill -SIGINT "$pid"
            fi
        fi
        rm tmp/pid.txt || :
    fi
}


case $action in
  help|--help)
    bash_setup print_help $0
    ;;

  list)
    # === list  # List functions
    while read -r one two; do
      echo -e "$BRed$two$Reset" "$one"
    done < <(cat -n $(dirname $0)/../main.js \
      | grep --extended-regexp '^\s+[0-9]+\sfunction\s+[^\(\)]+' \
      | sort -k2 \
      | grep --extended-regexp '\s+[^\( ]+\(' \
      | cut -d\( -f1 \
      | tr '\t' ' '  \
      | tr --squeeze-repeats ' ' \
      | tr ' ' '\t'  \
      | cut -f2,4 )

    # paste <(echo "$cols" | cut -f4) <(echo "$cols" | cut -f2)
      # | grep --color --extended-regexp '\s+.+' \
    ;;

  watch)
    cmd () {
      if [[ -z "$@" ]]; then
        path="$main_js"
      else
        path="$1"
        shift
      fi

      stamp="$(date '+%r')"

      is_fine=""
      {
        echo -e "=== jshint ${Bold}${path}${Reset}: " \
          && jshint $path && is_fine="yes" \
          && tput cuu1                     \
          && echo -e "=== jshint ${Bold}${path}${Reset} ${Bold}${Green}@${Reset} $stamp"; \
        } \
        || \
        { stat=$?; echo -e "${Red}Failed${Reset}"; return $stat; }

      if [[ "$path" =~ "server.js" && -n "$is_fine" ]]; then
          shutdown_server
          start_server
      fi
    }
    while read -r FILE; do
        cmd $FILE || :
        bash_setup is_same_file "$FILE" || :
    done < <(echo -e "$files")

    while read -r CHANGE; do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      path="${dir}$(echo "$CHANGE" | cut -d' ' -f 3)"
      file="$(basename $path)"

      # Make sure this is not a temp/swap file:
      { [[ ! -f "$path" ]] && continue; } || :

      if bash_setup is_same_file "$path"; then
        echo "=== No change: $CHANGE"
        continue
      fi

      echo -e "\n=== $CHANGE ($path)"

      if [[ "$path" =~ "$0" ]]; then
        echo -e "=== Reloading...\n"
        break
      fi

      if [[ "$file" =~ ".js" ]]; then
        { cmd $path && gui_setup reload-browser google-chrome "Dum"; } || :
        continue
      fi

    done < <(inotifywait --monitor --event close_write  -r main/ -r bin/ ) || exit 1
    $0 watch $THE_ARGS
    ;;

  *)
    echo "Unknown option: $action" 1>&2
    exit 1
    ;;

esac
