#!/usr/bin/env bash
#
#
THE_ARGS="$@"
THIS_DIR="$(bash_setup dirname_of_bin "$0")"

TEMP_SPLITS="/tmp/dum_dum_html/splits"
mkdir -p $TEMP_SPLITS

if [[ -z "$@" ]]; then
  action="watch"
else
  action=$1
  shift
fi

set -u -e -o pipefail

Color_Off='\e[0m'
Bold="$(tput bold)"
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
BGreen='\e[1;32m'
Orange='\e[0;33m'
BOrange='\e[1;33m'

case $action in
  help|--help)
    echo "=== dum_dum_html  files # Order is irrelevant. Include layout files and templates."
    bash_setup print_help $0
    ;;

  install_validator)
    cd "$THIS_DIR"
    mkdir -p tmp/validator
    cd tmp/validator
    rm -rf dist
    zip_url="$(wget -qO-  https://api.github.com/repos/validator/validator/releases/latest | grep browser_ | cut -d\" -f4 | head -n 1)"
    file_name="$(basename "$zip_url")"
    dir_name="$(basename "$zip_url" ".zip")"
    if [[ -d "$dir_name" ]]; then
      echo "=== Already installed vnu: $dir_name"
      exit 0
    fi
    trash-put vnu.jar* || : # Remove old files/dirs because they take lots of space.
    wget "$zip_url"
    unzip "$file_name" -d "$dir_name"
    ;;

  upgrade)
    # === upgrade
    $0 install_validator

    cd "$THIS_DIR"
    js_setup upgrade
    ;;

  watch)
    # === watch

    for FILE in $(git ls-files | grep --extended-regexp '.js|.html|bin'); do
      bash_setup is_same_file "$FILE" || :
    done

    $0 test || :

    echo -e "\n=== Watching:"
    while read -r CHANGE; do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      path="${dir}$(echo "$CHANGE" | cut -d' ' -f 3)"
      file="$(basename $path)"

      # Make sure this is not a temp/swap file:
      { [[ ! -f "$path" ]] && continue; } || :

      # Check if file has changed:
      if bash_setup is_same_file "$path"; then
        echo "=== No change: $CHANGE"
        continue
      fi

      # File has changed:
      echo -e "\n=== $CHANGE ($path)"
      if [[ "$path" =~ "$0" ]]; then
        echo "=== Reloading..."
        break
      fi

      if [[ "$file" =~ ".js" ]]; then
        js_setup jshint $path || continue
      fi

      if [[ "$file" =~ "main.js" ]]; then
        $0 test || continue
      fi

      if [[ "$path" == *specs/*.html ]]; then
        $0 test "$path"
      fi
    done < <(inotifywait --quiet --monitor --event close_write -r specs/ -r main/ -r bin/) || exit 1
    $0 watch $THE_ARGS
    ;;

  split)
    file="$1"; shift
    if [[ -z "$@" ]]; then
      dir="$(dirname "$file")"
    else
      dir="$1"; shift
    fi

    touch "$dir/style.css"
    touch "$dir/markup.html"
    touch "$dir/script.js"
    ;;

  test)
    if [[ -z "$@" ]]; then
      $0 test specs/splits/*.html specs/*.html
      exit 0
    fi

    for JS in main/*.js; do
      js_setup   jshint "$JS"
    done

    for FILE in "$@"; do
      if [[ "$FILE" == */splits/*.html ]]; then
        echo "=== Splitting: $FILE"
        $0 split "$FILE" "$TEMP_SPLITS"
        continue
      fi

      if [[ "$FILE" != *.template.html ]]; then
        echo "=== Skipping: $FILE" 1>&2
        continue
      fi

      echo -e "=== Waiting on: $FILE"
      split_on="$(cat "$FILE" -n | grep -i --extended-regexp '<!--\ +EXPECT.?\ +-->' | cut -f 1 | head -n 1)"
      expect="$(cat "$FILE" | tail -n +$((split_on + 1)))"

      TEMP="$(mktemp /tmp/dum_dum_html/XXXXXXXXXXXX.$(basename "$FILE"))"
      cat "$FILE" | head -n $((split_on - 1)) > "$TEMP"
      actual="$($0 $TEMP)"

      tput cuu1; tput el
      if [[ "$actual" != "$expect" ]]; then
        echo -e "=== Failed: ${Red}${FILE}${Color_Off}" 1>&2
        diff <(echo "$actual") <(echo "$expect")
        exit 1
      fi

      echo -e "=== $Green$FILE$Reset"
    done
    ;;

  section)
    # === __    section   STYLE|FOOT|...   path/to/file
    # === cat path/to/file | __  section   STYLE|FOOT|...
    section="$1"; shift
    grep  -Pzo '(?s)^\<!--\s+'$section'\s+-->\s?\n\K(.+?)(?=<!--|\Z)' $@
    ;;

  *)
    if [[ -f "$action" ]]; then
      vnu="$(echo tmp/validator/*/dist/vnu.jar)"
      final="$(node $THIS_DIR/main/main.js $THE_ARGS)"

      # === If <body is found, validate whole document:
      if echo "$final" | grep -i '<body' &>/dev/null; then
        echo "$final" | java -jar "$vnu" - || { stat="$?"; echo $action 1>&2; exit $stat; }
      fi

      echo "$final"
      exit 0
    fi

    $action $THE_ARGS
    ;;

esac
