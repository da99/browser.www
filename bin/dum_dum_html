#!/usr/bin/env bash
#
#
THE_ARGS="$@"
THIS_DIR="$(bash_setup dirname_of_bin "$0")"

TEMP="/tmp/dum_dum_html"
TEMP_SPLITS="$TEMP/splits"
mkdir -p $TEMP_SPLITS

if [[ -z "$@" ]]; then
  action="watch"
else
  action=$1
  shift
fi

set -u -e -o pipefail

Color_Off='\e[0m'
Bold="$(tput bold)"
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
BGreen='\e[1;32m'
Orange='\e[0;33m'
BOrange='\e[1;33m'

case $action in
  help|--help)
    echo ""
    echo "  dum_dum_html  [layout_file]  template"
    bash_setup print_help $0
    ;;

  install_validator)
    cd "$THIS_DIR"
    mkdir -p tmp/validator
    cd tmp/validator
    rm -rf dist
    zip_url="$(wget -qO-  https://api.github.com/repos/validator/validator/releases/latest | grep browser_ | cut -d\" -f4 | head -n 1)"
    file_name="$(basename "$zip_url")"
    dir_name="$(basename "$zip_url" ".zip")"
    if [[ -d "$dir_name" ]]; then
      echo "=== Already installed vnu: $dir_name"
      exit 0
    fi
    trash-put vnu.jar* || : # Remove old files/dirs because they take lots of space.
    wget "$zip_url"
    unzip "$file_name" -d "$dir_name"
    ;;

  upgrade)
    # === upgrade
    $0 install_validator

    cd "$THIS_DIR"
    js_setup upgrade
    ;;

  new-spec)
    # === __ new-spec  name-of-dir
    mkdir specs/$1
    mkdir specs/$1/input
    mkdir specs/$1/expect
    ;;

  test)
    # === __   test
    # ==  __   spec/dir
    if [[ -z "$@" ]]; then
      js_setup jshint main/main.js
      while read DIR; do
        $0 test "$DIR"
      done < <(find specs/ -maxdepth 1 -mindepth 1 -type d)
      exit 0
    fi

    DIR="$1"; shift
    ACTUAL="$TEMP/actual"
    echo -e "=== Testing: ${Bold}$DIR${Color_Off}"

    for FILE in "$DIR/input"/*.html; do
      { [[ ! -f "$FILE" ]] && echo "=== No html files." && exit 1; } || :

      # === Set sandbox:
      rm -rf "$ACTUAL"; mkdir -p "$ACTUAL"

      EXPECT="$DIR/expect"
      { $0 "$FILE" "$ACTUAL" "$TEMP"; } || { stat=$?; echo -e "=== ${Red}Failed${Color_Off} ($stat)"; exit $stat; }
      if ! bash_setup dirs-are-equal "$ACTUAL" "$EXPECT"; then
        echo -e "=== ${Red}Failed${Color_Off}"
        exit 1
      else
        tput cuu1; tput el
        echo -e "=== ${Green}$DIR${Color_Off}"
      fi
    done

      # echo -e "=== split: $Green$FILE$Reset"
    ;;

  watch)
    # === watch
    for FILE in $(git ls-files --cached --others --exclude-standard | grep --extended-regexp '.js|.html|bin'); do
      [[ -f "$FILE" ]] && bash_setup is_same_file "$FILE" || :
    done

    cmd="$@"
    if [[ -z "$cmd" ]]; then
      $0 test || :
    else
      $cmd || :
    fi

    echo -e "\n=== Watching:"
    while read -r CHANGE; do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      path="${dir}$(echo "$CHANGE" | cut -d' ' -f 3)"
      file="$(basename $path)"

      # Make sure this is not a temp/swap file:
      { [[ ! -f "$path" ]] && continue; } || :

      # Check if file has changed:
      if bash_setup is_same_file "$path"; then
        echo "=== No change: $CHANGE"
        continue
      fi

      # File has changed:
      echo -e "\n=== $CHANGE ($path)"

      if [[ "$path" =~ "$0" ]]; then
        echo "=== Reloading..."
        break
      fi

      if [[ -n "$cmd" ]]; then
        $cmd || :
        continue
      fi

      if [[ "$path" == main/*.js ]]; then
        if [[ "$path" == main/main.js ]]; then
          $0 test || :
        else
          js_setup jshint "$path" || :
        fi
      fi

      if [[ "$path" == specs/* ]]; then
        $0 test specs/"$(echo "$path" | cut -d'/' -f2)" || :
      fi
    done < <(inotifywait --quiet --monitor --event close_write -r specs/ -r main/ -r bin/) || exit 1
    $0 $THE_ARGS
    ;;

  split)
    node "$THIS_DIR/main/split.js" $@
    ;;

  no-section)
    # === __   no-section     path/to/file
    # === cat path/to/file | __  no-section
    grep  -Pzo '(?s)(\A.+?)(?=\n\<!--)' $@
    ;;

  section)
    # === __    section   STYLE|FOOT|...   path/to/file
    # === cat path/to/file | __  section   STYLE|FOOT|...
    section="$1"; shift
    grep  -Pzo '(?s)^\<!--\s+'$section'\s+-->\s?\n\K(.+?)(?=\n<!--|\Z)' $@
    ;;

  *)
    if [[ -f "$action" ]]; then
      node $THIS_DIR/main/main.js $THE_ARGS
      # vnu="$(echo tmp/validator/*/dist/vnu.jar)"
      # final="$(node $THIS_DIR/main/main.js $THE_ARGS)"

      # # === If <body is found, validate whole document:
      # if echo "$final" | grep -i '<body' &>/dev/null; then
      #   echo "$final" | java -jar "$vnu" - || { stat="$?"; echo $action 1>&2; exit $stat; }
      # fi

      # echo "$final"
      exit 0
    fi

    $action $THE_ARGS
    ;;

esac
