#!/usr/bin/env bash
#
#
THE_ARGS="$@"
THIS_DIR="$(bash_setup dirname_of_bin "$0")"

TEMP="/tmp/dum_dum_nodejs"
mkdir -p $TEMP

if [[ -z "$@" ]]; then
  action="watch"
else
  action=$1
  shift
fi

set -u -e -o pipefail

Color_Off='\e[0m'
Bold="$(tput bold)"
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
BGreen='\e[1;32m'
Orange='\e[0;33m'
BOrange='\e[1;33m'

case $action in
  help|--help)
    bash_setup print_help $0
    ;;


  upgrade)
    # === upgrade
    cd "$THIS_DIR"
    js_setup upgrade
    ;;

  function_name)
    grep -Pzo '^function \K(.+?)(?=\()' "$@"
    ;;

  functions_already_extracted)
    file="$1"; shift
    dir="$(dirname "$file")/$(basename "$file" .js)"
    while read NAME; do
      file_name="$dir/${NAME}.js"
      if [[ -s "$file_name" ]]; then
        echo "$file_name"
      fi
    done < <($0 function_name "$file")
    ;;

  functions_to_files)
    file="$1"; shift
    dir="$(dirname "$file")/$(basename "$file" ".js")"
    content=""
    function_name=""
    while IFS= read -r LINE; do
      content="$content\n$LINE"
      if [[ -z "$function_name" ]]; then
        function_name="$(echo "$LINE" | $0 function_name || :)"
      fi
      if ! { echo "$LINE" | grep --extended-regexp '(^\}(\s|$))|(^function .+\}$)' &>/dev/null; } then
        continue
      fi

      new_file="$dir/${function_name}.js"
      echo -e "$content"

      if [[ -s "$new_file" ]] && diff <(echo -e "$content") "$new_file" ; then
        echo "=== Already processed: $function_name" 1>&2
      else
        if [[ -s "$new_file" ]]; then
          echo "!!! File exists: $new_file" 1>&2
          exit 1
        fi
        echo -e -n  "=== Writing to ${Bold}${function_name}${Color_Off} -> ${new_file}" 1>&2;
        sleep 1; echo -n "." 1>&2; sleep 1; echo -n "." 1>&2;
        sleep 1; echo -n "." 1>&2; sleep 1; echo -n "." 1>&2;
        sleep 1; echo -n "." 1>&2; sleep 1; echo -n "." 1>&2;
        echo -e "$content" >> "$new_file"
      fi

      content=""
      function_name=""
    done < <(cat "$file")
    trash-put "$file"
    ;;

  test)
    target=""
    if [[ -n "$@" ]]; then
      target="$1"; shift
    fi

    while read FILE; do
      if [[ -n "$target" && "$(realpath -m "$target")" != "$(realpath -m "$FILE")" ]]; then
        continue
      fi

      js_setup jshint "$FILE"
      dups="$($0 print_dups "$FILE" || :)"
      if [[ ! -z "$dups" ]]; then
        echo -e "!!! Dups found:\n$dups" 1>&2
        exit 1
      fi

      case "$FILE" in
        main/node.js)
          node "$FILE" test
          ;;
      esac
    done < <(find main -type f -iname "*.js")
    ;;

  print_dups)
    file="$1"; shift
    cat "$file" | grep --extended-regexp '^\s*function\s+[^\s]+\(' | sed -e 's/^[ \t]*//' | tr -s ' ' | cut -d' ' -f 2 | cut -d'(' -f 1 | uniq -c | sort | grep -v --extended-regexp '\s+1'
    ;;

  watch)
    # === watch
    # === watch  cmd with args 
    for FILE in $(git ls-files --cached --others --exclude-standard | grep --extended-regexp '.js|.html|bin'); do
      [[ -f "$FILE" ]] && bash_setup is_same_file "$FILE" || :
    done

    cmd="$@"
    if [[ -z "$cmd" ]]; then
      $0 test || :
    else
      $cmd || :
    fi

    echo -e "\n=== Watching:"
    while read -r CHANGE; do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      path="${dir}$(echo "$CHANGE" | cut -d' ' -f 3)"
      file="$(basename $path)"

      # Make sure this is not a temp/swap file:
      { [[ ! -f "$path" ]] && continue; } || :

      # Check if file has changed:
      if bash_setup is_same_file "$path"; then
        echo "=== No change: $CHANGE"
        continue
      fi

      # File has changed:
      echo -e "\n=== $CHANGE ($path)"

      if [[ "$path" =~ "$0" ]]; then
        echo "=== Reloading..."
        break
      fi

      if [[ -z "$cmd" ]]; then
        $0 test "$path" || :
      else
        $cmd
      fi
    done < <(inotifywait --quiet --monitor --event close_write package.json -r main/ -r bin/) || exit 1
    $0 $THE_ARGS
    ;;


  *)
    echo "!!! Unknown action: $action" 1>&2
    exit 1
    ;;
esac
