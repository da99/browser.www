#!/usr/bin/env bash
#
#
THE_ARGS="$@"
THIS_DIR="$(bash_setup dirname_of_bin "$0")"

TEMP="/tmp/dum_dum_nodejs"
mkdir -p $TEMP

if [[ -z "$@" ]]; then
  action="watch"
else
  action=$1
  shift
fi

set -u -e -o pipefail

Color_Off='\e[0m'
Bold="$(tput bold)"
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
BGreen='\e[1;32m'
Orange='\e[0;33m'
BOrange='\e[1;33m'

case $action in
  help|--help)
    bash_setup print_help $0
    ;;


  upgrade)
    # === upgrade
    cd "$THIS_DIR"
    js_setup upgrade
    ;;

  test)
    find main -type f  -iname "*.js"  | xargs -I FILE js_setup jshint FILE || :
    node main/dum_dum_nodejs.js test
    ;;

  watch)
    # === watch
    # === watch  cmd with args 
    for FILE in $(git ls-files --cached --others --exclude-standard | grep --extended-regexp '.js|.html|bin'); do
      [[ -f "$FILE" ]] && bash_setup is_same_file "$FILE" || :
    done

    cmd="$@"
    if [[ -z "$cmd" ]]; then
      $0 test || :
    else
      $cmd || :
    fi

    echo -e "\n=== Watching:"
    while read -r CHANGE; do
      dir=$(echo "$CHANGE" | cut -d' ' -f 1)
      path="${dir}$(echo "$CHANGE" | cut -d' ' -f 3)"
      file="$(basename $path)"

      # Make sure this is not a temp/swap file:
      { [[ ! -f "$path" ]] && continue; } || :

      # Check if file has changed:
      if bash_setup is_same_file "$path"; then
        echo "=== No change: $CHANGE"
        continue
      fi

      # File has changed:
      echo -e "\n=== $CHANGE ($path)"

      if [[ "$path" =~ "$0" ]]; then
        echo "=== Reloading..."
        break
      fi

      if [[ -z "$cmd" ]]; then
        $0 test || :
      else
        $cmd
      fi
    done < <(inotifywait --quiet --monitor --event close_write package.json -r main/ -r bin/) || exit 1
    $0 $THE_ARGS
    ;;


  *)
    echo "!!! Unknown action: $action" 1>&2
    exit 1
    ;;
esac
