
external NaN, TypeError, Error, process, require, window, arguments, Object, RegExp;

/* process.stdout.write("."); */
import DA_STANDARD.STRING;
import DA_STANDARD.SPECS;
import System.Console;

module DA_STANDARD.COMMON
{

  string[] keys(v) {
    string[] arr = [];
    for (string x in v) {
      if (v.hasOwnProperty(x))
        arr.push(x);
    }
    return arr;
  }

  bool is_positive(v) {
    return typeof v === 'number' && is_finite(v) && v > 0;
  }

  bool is_finite(v) {
    return (typeof v === 'number') && (v !== NaN);
  }

  bool is_plain_object(v) {
    return typeof(v) === "object" && v.constructor === {}.constructor;
  }

  bool is_object(v) {
    return typeof(v) === "object";
  }

  function is_string(v) {
    return typeof v === "string";
  }

  function is_num(v) {
    return typeof v === 'number' && v !== NaN;
  }

  function is_boolean(v) {
    return typeof v === 'boolean';
  }

  bool is_true(v) {
    return v === true;
  }

  bool is_array(v) {
    var a = [];
    return typeof(v) == "object" && v.constructor === a.constructor;
  }

  void is_function_specs() {
    should_eq(true,  is_function(function () {}));
    should_eq(false, is_function(1));
  }

  bool is_function(v) {
    return typeof v === 'function';
  }

  bool is_regexp(val) {
    return(val instanceof RegExp);
  }

  void is_null_specs() {
    should_eq(true,  bool () { return is_null(null); });
    should_eq(false, bool () { return is_null(undefined); });
  }

  bool is_null(v) {
    return v === null || typeof(v) === "null";
  }

  void is_undefined_specs() {
    should_eq(true,  bool () { return is_undefined(undefined); });
    should_eq(false, bool () { return is_undefined(null); });
  }

  bool is_undefined(v) {
    return v === undefined || typeof(v) === "undefined";
  }

  void is_enumerable_specs() {
    should_eq(true,  bool () { return is_enumerable(["a"]); });
    should_eq(true,  bool () { return is_enumerable({"a": "b"}); });
    should_eq(true, bool () { return is_enumerable("a"); });
  }

  function is_enumerable(v) {
    return is_string(v) ||
      is_array(v)         ||
      is_plain_object(v)  ||
      (is_something(v) && is_finite(v.length));
  }


  void is_error_specs() {
    should_eq(true,  bool () { return is_error(new Error('anything')); });
    should_eq(false, bool () { return is_error('anything'); });
    should_eq(true,  bool () { return is_error(new Error('meh')); });
    should_eq(true,  bool () { return is_error(new TypeError('meow')); });
    should_eq(false, bool () { return is_error({stack: "", message: ""}); });
  }

  function is_error(v) {
    return is_object(v) && (
      v.constructor === Error ||
      (!is_plain_object(v) && is_string(v.stack) && is_string(v.message))
    );
  }

  void is_nothing_specs() {
    should_eq(true,  bool () { return is_nothing(null); });
    should_eq(true,  bool () { return is_nothing(undefined); });
    should_eq(false, bool () { return is_nothing([]); });
    should_eq(false, bool () { return is_nothing({}); });
    should_eq(false, bool () { return is_nothing({a: "c"}); });
  }

  bool is_nothing(v) {
    return v === null || v === undefined;
  }

  bool is_null_or_undefined(v) {
    return v === null || v === undefined;
  }

  void is_empty_specs() {
    should_eq(true,  bool () { return is_empty([]); });
    should_eq(true,  bool () { return is_empty({}); });
    should_eq(true,  bool () { return is_empty(""); });
    should_eq(false, bool () { return is_empty({a: "c"}); });
    should_eq(false, bool () { return is_empty([1]); });
    should_eq(false, bool () { return is_empty("a"); });
    should_eq(true,  bool () { return is_empty(return_arguments()); });
    should_eq(false, bool () { return is_empty(return_arguments(1,2,3)); });
    should_eq(true,  bool () { return is_empty(""); });
    should_eq(false, bool () { return is_empty("a"); });
    should_eq(false, bool () { return is_empty("  "); });
  }

  bool is_empty(string str) {
    return str.length === 0;
  }

  bool is_empty(v) {
    if (v && is_finite(v.length))
      return v.length === 0;

    if (is_plain_object(v))
      return keys(v).length === 0;

    throw new Error("Invalid value for is_empty: " + to_string(v));
  } // === func

  void is_something_specs() {
    should_eq(false, bool () { return is_something(null); });
    should_eq(false, bool () { return is_something(undefined); });
    should_eq(true,  bool () { return is_something([]); });
    should_eq(true,  bool () { return is_something({}); });
    should_eq(true,  bool () { return is_something({a: "c"}); });
  }

  function is_something(v) {
    if (arguments.length !== 1)
      throw new Error("arguments.length !== 1: " + to_string(v));
    return v !== null && v !== undefined;
  }

  bool is_arguments(v) {
    return Object.prototype.toString.call( v ) === '[object Arguments]';
  }

  string inspect(arg) {
    return to_string(arg);
  }

  void to_string_specs() {
    should_eq('null',              string () { return to_string(null); });
    should_eq('undefined',         string () { return to_string(undefined); });
    should_eq('[1]',               string () { return to_string([1]); });
    should_eq('"yo yo"',           string () { return to_string('yo yo'); });
    should_eq('{"a":"b","c":"d"}', string () { return to_string({a:'b', c:'d'}); });
  }

  string to_string(arg) {
    if (arg === null)
      return 'null';

    if (arg === undefined)
      return 'undefined';

    if (is_function(arg))
      return arg.toString().replace("function (){return(", "").replace(/\)?;\}$/, '');

    if (arg === true)
      return 'true';

    if (arg === false)
      return 'false';

    if (is_string(arg)) {
      return '"' + arg + '"';
    }

    if (is_function(arg))
      return (arg.name) ? arg.name + ' (function)' : arg.toString();

    if (is_error(arg))
      return '[Error] ' + to_string(arg.message);

    if (typeof arg === "object" ) {

      if (is_array(arg) || is_arguments(arg)) {
        string[] fin = [];
        foreach ( var x in arg ) {
          fin.push(to_string(x));
        }
        string fin_str = fin.join(",");

        if (is_arguments(arg))
          return "arguments[" + fin_str + "]";
        else
          return "[" + fin_str + "]";
      }

      string[] fin = [];
      for(var x in arg) {
        if (arg.hasOwnProperty(x)) {
          fin.push(to_string(x) + ":" + to_string(arg[x]));
        }
      }
      string fin_str = "{" + fin.join(",") + "}";
      return fin_str;
    }

    var _inspect = (typeof window == "undefined") ? require('util').inspect : function (v) { return "" + v; };
    return _inspect(arg);
  } // === string to_string

  void own_property_specs() {
    should_eq(3, own_property('num', {num: 3}));
    should_eq(undefined, own_property('num', {n:4}));
  }

  function own_property(string raw_name, v) {
    string name = trim(raw_name);
    if (!v.hasOwnProperty(name))
      return undefined;
    return v[name];
  } // === func own_property

  function return_arguments(...args) { return arguments; }
  function to_arguments() { return arguments; }

  void to_array_specs() {
    should_eq([1,2,3], function () { return to_array([1,2,3]); });
    should_eq([1,2,3], function () { return to_array(return_arguments(1,2,3)); });
  }

  function to_array(val) {
    if (!is_array(val) && val.constructor != arguments.constructor)
      throw new Error("Invalid value for to_array: " + to_string(val));

    var arr = [];
    int len = val.length;
    for (int i = 0; i < len; i++) {
      arr.push(val[i]);
    }
    return arr;
  } // === func

  // Removes begining slash, if any.
  string to_var_name(string val) {
    return to_var_name(val, "_");
  }

  string to_var_name(string val, string delim) {
    return val.replace(/^[\/]+/, "").replace(/[^a-zA-Z-0-9\_\-]+/g, delim);
  }

  void repeat_specs() {
    should_eq(5, int () { int i = 1; repeat(4, function () { i = i+1; }); return i; });
    should_eq(4, int () { int i = 0; repeat(4, void () { i = i+1; }); return i; });
    should_eq(3, int () { int i = -1; repeat(4, int () { i = i+1; }); return i; });
  }

  bool repeat(unsigned short num, func) {
    for (var i = 0; i < num; i++) { func(); }
    return true;
  }

} // === module DA_STANDARD.COMMON

