
external Error, Event, XMLHttpRequest, JSON;
external setTimeout, window, document;

import System.Console;
import DA_STANDARD.COMMON;
import DA_STANDARD.EVENT;
import DA_STANDARD.DOM;

module DA_STANDARD.SPECS
{

  class STATE {
    public static bool keep_checking = true; // === used by auto_reload
    public static string modified_at = ""; // === used by auto_reload
  }

  class THE_STAGE {
    public static void reset(string html) {
      window.document.querySelector("#THE_STAGE").innerHTML = html;
    }
  } // === class THE_STAGE

  class THE_SPECS {
    public static var fail_list = [];
    public static int pass_count = 0;
    public static int wait_count = 0;
    public static var spec_list = [];

    public static int timeout(bool() cond, void() f) {
      THE_SPECS.wait_count += 1;
      int max = 5;
      int count = 0;

      void reloop() {
        count += 1;
        if (count >= max) {
          THE_SPECS.wait_count -= 1;
          return failed("Gave up waiting for test: " + COMMON.to_string(cond), true, cond());
        }

        if (cond() === true) {
          THE_SPECS.wait_count -= 1;
          f();
          return;
        }

        setTimeout(reloop, 150);
      }
      reloop();

      return THE_SPECS.wait_count;
    }

    public static int timeout(void() f) {
      return THE_SPECS.timeout(f, 5000);
    }

    public static int timeout(void() f, int interval) {
      THE_SPECS.wait_count += 1;
      setTimeout(void () { THE_SPECS.wait_count -= 1; f(); }, interval);
      return THE_SPECS.wait_count;
    }

    public static void push(string name, void() f) {
      spec_list.push([name, f]);
    }

    public static void run(void() passed, void() they_failed) {
      while (THE_SPECS.fail_list.length === 0 && THE_SPECS.spec_list.length > 0 && THE_SPECS.wait_count == 0) {
        var pair = THE_SPECS.spec_list.shift();
        Console.log("=== " + pair[0] + " ===");
        pair[1]();
        Console.log("");
      }

      if (THE_SPECS.wait_count == 0) {
        if (THE_SPECS.fail_list.length > 0) {
          they_failed();
          throw new Error("Specs failed: \n" + THE_SPECS.fail_list.join("\n"));
        } else
          passed();
      } else {
        setTimeout(void () { THE_SPECS.run(passed, they_failed); }, 1000);
      }
    } // === void run(f)

  } // === class THE_SPECS

  bool arrays_are_equal(a1, a2) {
    int len_1 = a1.length;
    int len_2 = a2.length;
    if (len_1 !== len_2)
      return false;
    for (int i = 0 ; i < len_1 ; i++) {
      if (a1[i] !== a2[i])
        return false;
    }
    return true;
  }

  void should_eq(expected, func_or_other) {
    var actual = undefined;
    if (is_function(expected) && is_function(func_or_other) && expected === func_or_other) {
      actual = func_or_other;
    } else {
      if (is_function(func_or_other)) {
        actual = func_or_other();
      } else {
        actual = func_or_other;
      }
    }

    if (
        (actual != expected) &&
        !(is_array(expected) && is_array(actual) && arrays_are_equal(expected, actual))
       ) {

      return failed(to_string(func_or_other), to_string(expected), to_string(actual));
    }

    Console.log("Pass: " + to_string(expected) + " == " + to_string(func_or_other) );
  }

  void failed(string msg, expected, actual) {
    string new_msg = msg + " EXPECTED: " + expected + " ACTUAL: " + actual;
    if (typeof window === 'undefined')
      throw new Error("Failed: " + to_string(expected) + " !== " + to_string(actual));
    else
      THE_SPECS.fail_list.push(new_msg);
  }

  void should_eq(expected, func, ...args) {
    var actual = undefined;

    if (args.length == 0) {
      actual = func();
    } else {
      actual = func.apply(null, args);
    }

    if (actual != expected) {
      return failed(to_string(func) + " args: " + to_string(args), to_string(expected), to_string(actual));
    }

    Console.log("Pass: " + to_string(expected) + " == " + func.name + to_string(args));
  }

  void spec(f, args, expected) {
    var actual = f.apply(args);
    if (actual != expected) {
      return failed(f + "(" + args + ")", expected, actual);
    }
    Console.log("Pass: " + f + "(" + args + ")");
  }

  // This is not yet compatible with browsers like MSIE 10+.
  void trigger(x, string e_type) {
    var e = new Event(e_type, {view: window, bubbles: true, cancelable: true});

    if (x === "*document" || x === document) { x = document; }
    if (x === "*window" || x === window) { x = window; }
    if (typeof x === "string") { x = (new NODE(x)).origin; }

    x.dispatchEvent(e);
  } // === void trigger

  void auto_reload() {
    if (!STATE.keep_checking)
      return;

    var xhr = new XMLHttpRequest();

    xhr.open("GET", "/do-reload");
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.onload = function() {
      if (xhr.status !== 200)
        return;

      string old = STATE.modified_at;
      if (old === "") {
        STATE.modified_at = xhr.response;
        return;
      }

      if (old !== xhr.response) {
        STATE.keep_checking = true;
        window.location.reload(true);
      } else {
        STATE.modified_at = xhr.response;
      }
    };
    xhr.send(JSON.stringify("checking..."));
  } // === void auto_reload


} // === DA_STANDARD.SPECS
