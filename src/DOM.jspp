
external document, window;
import DA_STANDARD.STRING;
import DA_STANDARD.COMMON;
import DA_STANDARD.SPECS;

module DA_STANDARD.DOM {

  void ID_STATE_specs() {
    should_eq(1, int () { return ID_STATE.new_id(); });
    should_eq(2, int () { return ID_STATE.new_id(); });
  }

  // === ID_STATE:
  // ===   Used to generate unique ids for elements.
  class ID_STATE {

    public static int last_id = 0;

    public static int new_id() {
      ID_STATE.last_id = ID_STATE.last_id + 1;
      return ID_STATE.last_id;
    }

    public static string new_id(string prefix) {
      return trim(prefix) + (ID_STATE.new_id().toString());
    }

  } // === class ID_STATE

  void doc_node_specs() {
    THE_STAGE.reset('<div id="query_selector_id">hello</div>');
    should_eq("hello", DOC.node("#query_selector_id").html());
  }
  void doc_node_list_specs() {
    THE_STAGE.reset('<div class="node_list">hello</div><div class="node_list">hello 2</div>');
    should_eq(2, DOC.node_list("div.node_list").length());
  }

  class DOC {
    public static NODE node(string s) {
      return new NODE(document.querySelector(s));
    }

    public static NODE_LIST node_list(string s) {
      return new NODE_LIST(document.querySelectorAll(s));
    }

    public static void add_event(string event_name, string selector, f) {
      document.addEventListener(event_name, void (e) { if (!e.target.matches(selector)) return; f(e); });
    }
  } // class DOC

  void node_add_class_specs() {
    THE_STAGE.reset('<div>hello</div>');
    DOC.node("#THE_STAGE div").add_class("red_hot");
    should_eq(1, DOC.node_list("div.red_hot").length());
  }

  class NODE_LIST {
    private var origin;

    public int length () {
      return this.origin.length;
    }

    public NODE_LIST(v) {
      this.origin = v;
    }

    public NODE item(int i) {
      return new NODE(this.origin[i]);
    }

    public NODE_LIST add_class(string new_name) {
      int l = this.origin.length;
      for(int i = 0; i < l; i++) {
        this.item(i).add_class(new_name);
      }
      return this;
    }

    public NODE_LIST remove_class(string target) {
      int l = this.origin.length;
      for(int i = 0; i < l; i++) {
        this.item(i).remove_class(target);
      }
      return this;
    }

  } // class NodeList

  void node_hide_specs() {
    THE_STAGE.reset('<div id="hide_factor">Factor</div>');
    DOC.node("#hide_factor").hide();
    should_eq("none", document.querySelector("#hide_factor").style.display);
  }

  void node_show_specs() {
    THE_STAGE.reset('<div id="show_factor" style="display: inline">Factor</div>');
    DOC.node("#show_factor").hide();
    DOC.node("#show_factor").show();
    should_eq("", document.querySelector("#show_factor").style.display);
  }

  class NODE {

    public var origin;

    public NODE(v) {
      this.origin = v || (new document.createElement("div"));
    }

    public string html() {
      return this.origin.innerHTML;
    }

    public string text() {
      return this.origin.textValue;
    }

    public NODE show() {
      this.origin.style.display = "";
      return this;
    }

    public NODE hide() {
      this.origin.style.display = "none";
      return this;
    }

    public NODE add_class(string new_class) {
      this.origin.classList.add(new_class);
      return this;
    }

    public NODE remove_class(string target) {
      this.origin.classList.remove(target);
      return this;
    }

    public bool has_class(string target) {
      return this.origin.classList.contains(target);
    }

    public bool has_attr(string raw_name) {
      string val = attr(trim(raw_name));
      if (is_nothing(val) || is_empty(val))
        return false;
      return true;
    }

    public string attr(string raw_name) {
      string name = trim(raw_name);
      return trim( this.origin.getAttribute(name) || "" );
    }

    public NODE attr(string raw_name, string raw_val) {
      string name = trim(raw_name);
      string val  = trim(raw_val);
      this.origin.setAttribute(name, val);
      return this;
    }

    // Returns id.
    // Sets id of element if no id is set.
    //
    // .dom_id(raw_or_jquery)
    public string dom_id() {
      return this.dom_id("element_");
    } // === id

    // Returns id.
    // Sets id of element if no id is set.
    //
    // .dom_id('prefix')
    public string dom_id(string prefix) {
      string old = this.attr('id');

      if (!is_empty(old))
        return old;

      var str = ID_STATE.new_id(prefix);
      this.attr('id', str);
      return str;
    } // === id

  } // === class Element

} // === DA_STANDARD.DOM


