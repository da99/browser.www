
external document, window;
import DA_STANDARD.STRING;
import DA_STANDARD.COMMON;
import DA_STANDARD.SPECS;
import System.Console;

module DA_STANDARD.DOM {

  void ID_STATE_specs() {
    should_eq(1, int () { return ID_STATE.new_id(); });
    should_eq(2, int () { return ID_STATE.new_id(); });
  }

  // === ID_STATE:
  // ===   Used to generate unique ids for elements.
  class ID_STATE {

    public static int last_id = 0;

    public static int new_id() {
      ID_STATE.last_id = ID_STATE.last_id + 1;
      return ID_STATE.last_id;
    }

    public static string new_id(string prefix) {
      return trim(prefix) + (ID_STATE.new_id().toString());
    }

  } // === class ID_STATE

  string dom_id(x) {
    NODE n = new NODE(x);
    string current = n.attr("id");
    if (current.length === 0) {
      current = ID_STATE.new_id("ele_");
      n.attr("id", current);
    }
    return current;
  }

  void doc_node_specs() {
    THE_STAGE.reset('<div id="query_selector_id">hello</div>');
    should_eq("hello", DOC.node("#query_selector_id").html());
  }
  void doc_node_list_specs() {
    THE_STAGE.reset('<div class="node_list">hello</div><div class="node_list">hello 2</div>');
    should_eq(2, DOC.node_list("div.node_list").length());
  }

  class DOC {
    public static NODE node(string s) {
      return new NODE(document.querySelector(s));
    }

    public static NODE_LIST node_list(string s) {
      return new NODE_LIST(document.querySelectorAll(s));
    }

    public static void add_event(string event_name, string selector, f) {
      document.addEventListener(event_name, void (e) { if (!e.target.matches(selector)) return; f(e); });
    }
  } // class DOC

  void node_add_class_specs() {
    THE_STAGE.reset('<div>hello</div>');
    DOC.node("#THE_STAGE div").add_class("red_hot");
    should_eq(1, DOC.node_list("div.red_hot").length());
  }

  class NODE_LIST {
    private var origin;

    public int length () {
      return this.origin.length;
    }

    public NODE_LIST(v) {
      this.origin = v;
    }

    public NODE item(int i) {
      return new NODE(this.origin[i]);
    }

    public NODE_LIST add_class(string new_name) {
      int l = this.origin.length;
      for(int i = 0; i < l; i++) {
        this.item(i).add_class(new_name);
      }
      return this;
    }

    public NODE_LIST remove_class(string target) {
      int l = this.origin.length;
      for(int i = 0; i < l; i++) {
        this.item(i).remove_class(target);
      }
      return this;
    }

  } // class NodeList

  void node_hide_specs() {
    THE_STAGE.reset('<div id="hide_factor">Factor</div>');
    DOC.node("#hide_factor").hide();
    should_eq("none", document.querySelector("#hide_factor").style.display);
  }

  void node_show_specs() {
    THE_STAGE.reset('<div id="show_factor" style="display: inline">Factor</div>');
    DOC.node("#show_factor").hide();
    DOC.node("#show_factor").show();
    should_eq("", document.querySelector("#show_factor").style.display);
  }

  void node_outer_html_specs() {
    string html = '<div id="node_outer_html">hello</div>';
    THE_STAGE.reset(html);
    should_eq(html, DOC.node('#node_outer_html').outer_html());
  }

  class NODE {

    public var origin;

    public NODE(v) {
      if (typeof v === "object" && v.origin && v.is_node) {
        this.origin = v.origin;
      } else {
        if (typeof v === "string") {
          v = document.querySelector(v);
        }
        this.origin = v || (new document.createElement("div"));
      }
    }

    public bool is_node() { return true; }

    public string html() {
      return this.origin.innerHTML;
    }

    public string outer_html() {
      return this.origin.outerHTML;
    }

    public string text() {
      return this.origin.textValue;
    }

    public NODE show() {
      this.origin.style.display = "";
      return this;
    }

    public NODE hide() {
      this.origin.style.display = "none";
      return this;
    }

    public NODE add_class(string new_class) {
      this.origin.classList.add(new_class);
      return this;
    }

    public NODE remove_class(string target) {
      this.origin.classList.remove(target);
      return this;
    }

    public bool has_class(string target) {
      return this.origin.classList.contains(target);
    }

    public bool has_attr(string raw_name) {
      string val = attr(trim(raw_name));
      if (is_nothing(val) || is_empty(val))
        return false;
      return true;
    }

    // Special cases:
    //   dom! - Gets or sets id
    public string attr(string raw_name) {
      if (raw_name === "id!") {
        string old = this.attr('id');

        if (!is_empty(old))
          return old;

        var str = ID_STATE.new_id("ele_");
        this.attr('id', str);
        return str;
      }

      string name = trim(raw_name);
      Console.log(this.origin);
      return trim( this.origin.getAttribute(name) || "" );
    }

    public NODE attr(string raw_name, string raw_val) {
      string name = trim(raw_name);
      string val  = trim(raw_val);
      this.origin.setAttribute(name, val);
      return this;
    }

    public NODE_LIST node_list(string q) {
      return new NODE_LIST(this.origin.querySelectorAll(q));
    }

  } // === class Element

  void html_unescape_all_specs() {
    should_eq('<p>{{1}}</p>', html_unescape_all("&lt;p&gt;&#123;&#123;1&#125;&#125;&lt;/p&gt;"));
  }

  string html_unescape_all(string raw) {
    // From: http://stackoverflow.com/questions/1912501/unescape-html-entities-in-javascript
    return (new window.DOMParser().parseFromString(raw, "text/html"))
      .documentElement
      .textContent;
  }

} // === DA_STANDARD.DOM


