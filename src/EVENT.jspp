
external window, document, Event, Error, MouseEvent;
import DA_STANDARD.SPECS;
import DA_STANDARD.DOM;
import DA_STANDARD.COMMON;
import System.Console;

module DA_STANDARD.EVENT {

  class FUNCS {
    public static Listener[] list = [];
  } // === class STATE

  class Listener {
    public string target_id  = "unknown";
    public string event_type = "unknown";
    public var func;

    public Listener(target, string event_type, func) {
      this.target_id  = event_dom_id(target);
      this.event_type = event_type;
      this.func = func;
    }

    public string key() {
      return [this.target_id, this.event_type].join(" ");
    }

    function target() {
      return to_dom(this.target_id);
    }
  } // === class Listener

  function to_dom(x) {
    var target;
    switch (x) {
      case "*window":
        target = window;
        break;
      case "*document":
        target = document;
        break;
      default:
        target = document.querySelector("#" + x);
    }
    return target;
  }

  void remove() {
    Listener l;
    while (FUNCS.list.length > 0) {
      l = FUNCS.list.pop();
      l.target().removeEventListener(l.event_type, l.func, false);
    }
  }

  void event_add_specs() {
    // Is the event added?
    var f = void (e) { e; };
    add(document, "click", f);
    should_eq(true, EVENT.already_added(new Listener(document, "click", f)));

    // Do the event run?
    THE_STAGE.reset('<span id="event_trigger_span">clickable</span>');
    int i = 0;
    add("#event_trigger_span", "click", function (e) { i += 2;});
    trigger("#event_trigger_span", "click");
    trigger("#event_trigger_span", "click");
    should_eq(4, i);
  }

  string event_dom_id(x) {
    if (x === window) { return "*window"; }
    if (x === document) { return "*document"; }

    if (typeof x === "object" && x.origin) {
      return x.attr("id!");
    }

    if (is_string(x)) {
      return((new NODE(x)).attr("id!"));
    }

    if (typeof x === "object") {
      return DOM.dom_id(x);
    }

    throw new Error("Unable to get a dom id for value.");
  }

  bool already_added(Listener l) {
    int len = FUNCS.list.length;
    string key = l.key();
    for (int i = 0; i < len; i++) {
      if (FUNCS.list[i].key() === key)
        return true;
    }
    return false;
  }

  bool add(x, string e_type,  f) {
    string x_id = event_dom_id(x);
    Listener l = new Listener(x, e_type, f);

    if (already_added(l)) {
      return false;
    }
    FUNCS.list.push(l);

    var target = l.target();

    if (target.addEventListener) {
      target.addEventListener(e_type, f, false);
      // 'false' used for usedCapture (3rd argument)
      //   to remain compatible with aging browsers.
      return true;
    }

    // from: https://www.oneupweb.com/blog/2012-01-10-oneupweb-cross-browser-event-binding-without-jquery/
    if (target.attachEvent) {
      target.attachEvent("on" + e_type, function (e) { f.call(e.srcElement, e); });
      return true;
    }

    return false;
  } // === void add

  void prevent_default(x) {
    if (x.preventDefault) {
      x.preventDefault();
    }
  }

  void stop(x) {
    string[] funcs = "stopPropagation,stopImmediatePropagation,preventDefault".split(",");
    for (int i = 0; i < funcs.length; i++) {
      if (x[funcs[i]]) {
        x[funcs[i]]();
      }
    }
  }

} // === module DA_STANDARD.EVENT
