
external window, document, Event, Error, MouseEvent;
import DA_STANDARD.SPECS;
import DA_STANDARD.DOM;
import DA_STANDARD.COMMON;
import System.Console;

module DA_STANDARD.EVENT {

  class STATE {
    public static var LISTS = {};
  } // === class STATE

  void event_add_specs() {
    // Is the event added?
    var f = void (e) { e; };
    add(document, "click", f);
    should_eq(f, STATE.LISTS["*document"]["onclick"].pop());

    // Do the event run?
    THE_STAGE.reset('<span id="event_trigger_span">clickable</span>');
    int i = 0;
    add("#event_trigger_span", "click", function (e) { i += 2;});
    trigger("#event_trigger_span", "click");
    trigger("#event_trigger_span", "click");
    should_eq(4, i);
  }

  function create_handler(string id, string key) {
    return(function (e) {
      var list = (STATE.LISTS[id][key] || []);
      var len  = list.length;
      for (int i = 0; i < len; i++) {
        list[i](e);
      }
    });
  }

  string event_dom_id(x) {
    if (x === window) { return "*window"; }
    if (x === document) { return "*document"; }

    if (typeof x === "object" && x.origin) {
      return x.attr("id!");
    }

    if (is_string(x)) {
      return((new NODE(x)).attr("id!"));
    }

    if (typeof x === "object") {
      return DOM.dom_id(x);
    }

    throw new Error("Unable to get a dom id for value.");
  }

  void add(x, string e_type, f) {
    string x_id = event_dom_id(x);
    string key = "on" + e_type;

    if (!STATE.LISTS[x_id])
      STATE.LISTS[x_id] = {};

    if (!STATE.LISTS[x_id][key])
      STATE.LISTS[x_id][key] = [];

    var target;
    switch (x_id) {
      case "*window":
        target = window;
        break;
      case "*document":
        target = document;
        break;
      default:
        target = document.querySelector("#" + x_id);
    }

    STATE.LISTS[x_id][key].push(f);

    if (STATE.LISTS[x_id][key].length === 1) {
      // 'false' used for usedCapture (3rd argument)
      //   to remain compatible with aging browsers.
      target.addEventListener(e_type, create_handler(x_id, key), false);
    }
  } // === void add

} // === module DA_STANDARD.EVENT
