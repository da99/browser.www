
external Error, arguments;
import DA_STANDARD.SPECS;
import DA_STANDARD.OBJECT;
import DA_STANDARD.COMMON;
import System;

module DA_STANDARD.TEMPLATE {

  class STATE {
    public static string[] allowed = [
      escape_char('&'), escape_char('<'), escape_char('>')
    ];
    public static RegExp replace_pattern = new RegExp( '(?:' + allowed.join('|') + ')', 'g');
  }

  void unescape_specs() {
    string s = "&#x3c;p id=\"main\" class=\"red hot\"&#x3e;&#x26;#x22;&#x26;#x27;hello&#x26;#x27;&#x26;#x22;&#x3c;/p&#x3e;";
    should_eq('<p id="main" class="red hot">&#x22;&#x27;hello&#x27;&#x22;</p>', TEMPLATE.unescape(s));
  }

  string escape_char(string x) {
    switch (x) {
      case '&' : return "&#x26;";
      case '<' : return "&#x3c;";
      case '>' : return "&#x3e;";
      case '"' : return "&#x22;";
      case "'" : return "&#x27;";
      case '`' : return "&#x60;";
      case '{' : return "&#x7b;";
      case '}' : return "&#x7d;";
      default: throw new Error("Unknown string to escape for Template");
    }
  }

  string unescape_string(string s) {
    switch (s) {
      case "&#x26;" : return '&';
      case "&#x3c;" : return '<';
      case "&#x3e;" : return '>';
      /* case "&#x22;" : return '"'; */
      /* case "&#x27;" : return "'"; */
      /* case "&#x60;" : return '`'; */
      /* case "&#x7b;" : return '{'; */
      /* case "&#x7d;" : return '}'; */
      default: throw new Error("Unknown string to unescape for Template");
    }
  }

  string unescape(string source) {
    return source.replace(TEMPLATE.STATE.replace_pattern, unescape_string);
  }

  void template_render_specs() {
    string str = "a {{abc}} {{unknown}} b {{# arr }} {{a}}->{{abc}} {{/arr}} {{#o}} {{inner}} {{/o}}";
    var o      = {a: "default", abc: " A-B-C ", arr: [{a: "a"},{a: "b"},{a: "c"}], o: {inner: "inside"}, name: " BWC "};
    should_eq(
        "a  A-B-C  {{unknown}} b  a-> A-B-C   b-> A-B-C   c-> A-B-C    inside ",
        TEMPLATE.render(str, o)
    );

  }

  string render(string raw, obj) {
    return render_var(
        render_iter(raw, obj),
        obj
        );
  }

  string render_var(string raw, obj) {
    return raw.replace(/\{\{([a-zA-Z0-9\_]+)\}\}/g, string (string matched) {
        string key = arguments[1];
        if (obj.hasOwnProperty(key)) { return obj[key]; }
        return matched;
        });
  }

  string render_array(string partial, obj, arr) {
    string rendered = "";
    for (int i = 0; i < arr.length; i++) {
      rendered += render(partial, OBJECT.assign(obj, (arr[i].constructor == {}.constructor ? arr[i] : {})));
    }
    return rendered;
  }

  string render_obj(string partial, o1, o2) {
    return render(partial, OBJECT.assign(o1, o2));
  }

  string render_iter(string str, obj) {
    return str.replace(
        /\{\{#\ *([^\}]+)\ *\}\}(.+)\{\{\/\ *\1\ *\}\}/g,
        string (string matched) {
          string key     = arguments[1];
          string partial = arguments[2];

          if (obj.hasOwnProperty(key)) {
            var inner_o = obj[key];
            if (is_array(inner_o)) {
              return render_array(partial, obj, inner_o);
            }
            return render_obj(partial, obj, inner_o);
          }

          return matched;
        }
    );
  } // === string render_iter

} // === module TEMPLATE
